name: Build wheels

on: [ push, pull_request, workflow_dispatch ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  generate_wheels_matrix:
    name: Generate wheels matrix
    runs-on: ubuntu-latest
    outputs:
      include: ${{ steps.set-matrix.outputs.include }}
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Install cibuildwheel and pypyp
        run: |
          pipx install cibuildwheel==2.22.0
          pipx install pypyp==1.2.0
          pipx install "mypy==1.14.0"

      - id: set-matrix


        run: |
          MATRIX=$(
            {
              cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform linux . \
              | pyp 'json.dumps({"only": x, "os": "ubuntu-latest"})' \
              && cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform macos . \
              | pyp 'json.dumps({"only": x, "os": "macos-latest"})' \
              && cibuildwheel --config-file=cibuildwheel.toml --print-build-identifiers --platform windows . \
              | pyp 'json.dumps({"only": x, "os": "windows-latest"})'
            } | pyp 'json.dumps(list(map(json.loads, lines)))'
          )
          echo "include=$MATRIX" | tee -a $GITHUB_OUTPUT
        env:
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_ARCHS_WINDOWS: AMD64

  build_wheels:
    name: Build ${{ matrix.only }}
    needs: generate_wheels_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.generate_wheels_matrix.outputs.include) }}

    steps:
      - uses: actions/checkout@v4.2.2
      - uses: pypa/cibuildwheel@v2.22.0
        with:
          config-file: cibuildwheel.toml
          package-dir: .
          only: ${{ matrix.only }}

      - uses: actions/upload-artifact@v4.5.0
        with:
          name: dist-${{ matrix.only }}
          path: ./wheelhouse/*.whl
          overwrite: true

  build_sdist_python_wheel:
    name: sdist and python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: actions/setup-python@v5.3.0
        name: Install Python
        with:
          python-version: "3.9"
      #      - name: Run check-manifest
      #        run: |
      #          pip install check-manifest
      #          check-manifest -v
      - name: Build sdist and wheel
        run: |
          python -m pip install --upgrade setuptools build "mypy==1.14.0"
          python -m build
      - uses: actions/upload-artifact@v4.5.0
        with:
          name: dist
          # dist/*.whl... dist/*.whl
          # Binary wheel 'untruncate_json-1.1.0-cp39-cp39-linux_x86_64.whl' has an
          #         unsupported platform tag 'linux_x86_64'.
          path: |
            dist/*.tar.gz
  # uh... translate js code to python just to translate it back?!
  #  build_wasm_wheel:
  #    name: WASM wheel for 3.10
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v4
  #      - uses: actions/setup-python@v4
  #        name: Install Python
  #        with:
  #          python-version: "3.10"
  #      - uses: actions/setup-node@v3
  #        with:
  #          node-version: 18.5.0 # pyodide tests with this version
  #      - name: Install emscripten
  #        id: install_emsdk
  #        run: |
  #          git clone https://github.com/emscripten-core/emsdk.git
  #          cd emsdk
  #          # Version of Emscripten pyodide 0.21.0 uses.
  #          ./emsdk install 3.1.14
  #          ./emsdk activate 3.1.14
  #          # We need the location of emscripten when we use pyodide-build
  #          echo "EMSCRIPTEN_DIR=$(pwd)" >> $GITHUB_OUTPUT
  #      - name: Install pyodide-build
  #        run: |
  #          python -m pip install "pyodide-build==0.21.0"
  #      - name: Build wasm wheels
  #        env:
  #          MYPY_USE_MYPYC: "1"
  #          MYPYC_OPT_LEVEL: "3"
  #          EMSCRIPTEN_DIR: ${{ steps.install_emsdk.outputs.EMSCRIPTEN_DIR }}
  #        run: |
  #          source $EMSCRIPTEN_DIR/emsdk_env.sh
  #          pyodide build --exports pyinit
  #      - name: Install pyodide for WASM test
  #        run: |
  #          npm install pyodide@0.21.3
  #      - name: Run WASM smoke test
  #        run: |
  #          node wasm_test.js
  #      - uses: actions/upload-artifact@v3
  #        with:
  #          name: dist
  #          path: |
  #            dist/*.whl

  # don't care about releases right now.
  #  release:
  #    name: create release
  #    needs: [build_wheels, build_sdist_python_wheel]
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Download artifact
  #        uses: actions/download-artifact@v3
  #        with:
  #          name: dist
  #          path: dist
  #      - name: Release
  #        if: ${{ github.event_name != 'pull_request' }}
  #        # https://github.com/actions/upload-release-asset/issues/47
  #        uses: actions/github-script@v6
  #        with:
  #          github-token: ${{secrets.GITHUB_TOKEN}}
  #          script: |
  #            const fs = require('fs').promises;
  #            const { repo: { owner, repo }, sha } = context;
  #
  #            console.log('environment', process.versions);
  #            console.log({ owner, repo, sha });
  #
  #            const release = await github.rest.repos.createRelease({
  #              owner, repo,
  #              // if GITHUB_REF just appears to be a branch, use tag-{commit} as the tag
  #              tag_name: process.env.GITHUB_REF.includes("refs/heads/") ? "tag-" + sha : process.env.GITHUB_REF.split("/").pop(),
  #              target_commitish: sha
  #            });
  #
  #            console.log('created release', { release });
  #
  #            for (let file of await fs.readdir('dist')) {
  #              console.log('uploading', file);
  #
  #              await github.rest.repos.uploadReleaseAsset({
  #                owner, repo,
  #                release_id: release.data.id,
  #                name: file,
  #                data: await fs.readFile(`./dist/${file}`)
  #              });
  #            }

  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/untruncate-json
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - name: Get packages
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: dist*
          path: dist/
          merge-multiple: true
      - name: Get more packages
        uses: actions/download-artifact@v4.1.8
        with:
          pattern: dist-*
          path: ./wheelhouse/*.whl
          merge-multiple: true
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@v1.12.3
        with:
          skip-existing: true

    needs: [
      build_wheels,
      build_sdist_python_wheel
    ]